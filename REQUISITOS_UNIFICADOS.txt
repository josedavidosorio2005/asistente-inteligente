REQUISITOS UNIFICADOS - ASISTENTE INTELIGENTE

1. Requisitos Técnicos Básicos
- Python 3.11 (mínimo 3.8 compatible)
- Instalar dependencias: pip install -r requirements.txt
- Sistema operativo soportado: Windows (desarrollado y probado), compatible Linux/macOS (ajustar rutas de voz si aplica)

2. Dependencias y Servicios Opcionales
- Google Drive API (credentials.json + token.pickle) para sincronizar notas
- Motores TTS: gTTS (requiere Internet), edge-tts (Windows/Edge)
- dateparser para interpretación flexible de fechas

3. Estructura de Datos / Base de Datos
- SQLite local en data/app.db (ignorada por Git)
- Tablas:
  events(id, title, date, time, completed)
  notes(id, title, content, folder, updated_at)
  config(key, value JSON)
- Índices: idx_events_date, idx_events_date_time, idx_notes_folder
- Migraciones automáticas desde: resumenes/eventos.json y notas/*.txt
- Función optimize() para ANALYZE y VACUUM opcional

4. Funciones Actuales del Asistente
- Gestión de notas (crear, listar, buscar, eliminar, carpetas)
- Gestión de eventos diarios/semanales y marcar completados
- Interpretación básica de intents (saludo, hora, eventos, notas, recordatorios, tema, voz, salir, abrir apps)
- Menú de ayuda desplegable (HTML) accesible con botón ?
- Configuración dinámica (voz, micrófono, tema) persistida en tabla config
- TTS multi-motor y ajuste de velocidad (pydub)

5. Flujo de Uso en Nueva Máquina
1. Clonar repositorio
2. Crear venv y activar
3. Instalar dependencias
4. (Opcional) Colocar credentials.json para Drive
5. Ejecutar: python asistente_mic.py
6. Autorizar Drive en primer uso (si aplica)

6. Comandos de Voz Ejemplos
- "crear nota <titulo>: <contenido>"
- "leer nota <titulo>"
- "eliminar nota <titulo>"
- "eventos de hoy" / "eventos de esta semana"
- "crear evento <titulo> el 25 diciembre a las 15:00"
- "recuérdame <tarea> mañana a las 9"
- "cambia a tema oscuro" / "cambia voz" 
- "salir" para cerrar

7. Roadmap Futuro (derivado de fases previas)
- OCR tiempo real + extracción entidades
- Reconocimiento de voz híbrido (offline/online)
- Motor proactivo (sugerencias automáticas)
- Integración Google/Microsoft Calendar
- Planificador de recordatorios persistente (APScheduler)
- Dashboard web (FastAPI + React) paralela a la UI PyQt
- Seguridad (cifrado local, roles, logs auditoría)
- Contenedorización y despliegue cloud (Docker + CI/CD)

8. Buenas Prácticas Implementadas
- PRAGMA WAL y busy_timeout en SQLite para concurrencia
- Transacciones context manager
- Logging de errores DB en data/db_errors.log
- Tests unitarios: notas y eventos
- Ignorar datos locales sensibles (.gitignore)

9. Próximas Mejoras Recomendadas
- Test de intents NLP
- Persistencia real de recordatorios
- Limpieza de código de ayuda legacy
- Refuerzo de validaciones de entrada (sanitización)
- Documentar API interna (si se expone) 

10. Soporte / Troubleshooting
- Error credenciales: verificar credentials.json
- Error dependencias: reinstalar requirements
- BD corrupta: borrar data/app.db (se recrea, se pierden datos)
- Voz sin audio: revisar dispositivo por defecto y permisos

---
Este documento reemplaza MANUAL_USUARIO.txt y pasos a seguir.
